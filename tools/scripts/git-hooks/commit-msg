#!/bin/sh
# LICS Commit message validation hook
# Validates commit messages against Conventional Commits specification

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_error() {
    echo "${RED}‚úó${NC} $1"
}

print_success() {
    echo "${GREEN}‚úì${NC} $1"
}

print_info() {
    echo "${BLUE}‚Ñπ${NC} $1"
}

# Read the commit message
commit_message=$(cat "$1")

# Remove comments and empty lines
commit_message=$(echo "$commit_message" | grep -v "^#" | grep -v "^$" | head -1)

# Skip validation for merge commits
if echo "$commit_message" | grep -q "^Merge"; then
    print_info "Merge commit detected, skipping validation"
    exit 0
fi

# Skip validation for revert commits
if echo "$commit_message" | grep -q "^Revert"; then
    print_info "Revert commit detected, skipping validation"
    exit 0
fi

# Skip validation for initial commit
if echo "$commit_message" | grep -qi "initial commit"; then
    print_info "Initial commit detected, skipping validation"
    exit 0
fi

# Define valid commit types based on Conventional Commits
VALID_TYPES="feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert"

# Define valid scopes for LICS project
VALID_SCOPES="frontend|backend|edge-agent|infrastructure|docs|api|ui|auth|device|experiment|task|video|mqtt|database|cache|monitoring|deployment|security|deps|config"

# Conventional Commits pattern
# Format: type(scope): description
# - type: required
# - scope: optional
# - description: required
CONVENTIONAL_PATTERN="^(${VALID_TYPES})(\(${VALID_SCOPES}\))?: .{1,50}"

echo "üîç Validating commit message..."
echo "üìù Commit message: ${YELLOW}$commit_message${NC}"
echo

# Check if commit message matches the conventional commits pattern
if echo "$commit_message" | grep -qE "$CONVENTIONAL_PATTERN"; then
    print_success "Commit message format is valid"
else
    print_error "Invalid commit message format"
    echo
    echo "${YELLOW}Expected format:${NC} <type>(<scope>): <description>"
    echo
    echo "${YELLOW}Valid types:${NC}"
    echo "  feat     - A new feature"
    echo "  fix      - A bug fix"
    echo "  docs     - Documentation only changes"
    echo "  style    - Changes that do not affect the meaning of the code"
    echo "  refactor - A code change that neither fixes a bug nor adds a feature"
    echo "  perf     - A code change that improves performance"
    echo "  test     - Adding missing tests or correcting existing tests"
    echo "  chore    - Changes to the build process or auxiliary tools"
    echo "  build    - Changes that affect the build system or external dependencies"
    echo "  ci       - Changes to CI configuration files and scripts"
    echo "  revert   - Reverts a previous commit"
    echo
    echo "${YELLOW}Valid scopes:${NC}"
    echo "  frontend      - Next.js frontend application"
    echo "  backend       - FastAPI backend service"
    echo "  edge-agent    - Edge device agent"
    echo "  infrastructure- Terraform, K8s, Docker"
    echo "  docs          - Documentation updates"
    echo "  api           - API changes"
    echo "  ui            - User interface changes"
    echo "  auth          - Authentication/authorization"
    echo "  device        - Device management"
    echo "  experiment    - Experiment management"
    echo "  task          - Task builder system"
    echo "  video         - Video streaming"
    echo "  mqtt          - MQTT communication"
    echo "  database      - Database changes"
    echo "  cache         - Caching changes"
    echo "  monitoring    - Monitoring and observability"
    echo "  deployment    - Deployment configuration"
    echo "  security      - Security improvements"
    echo "  deps          - Dependency updates"
    echo "  config        - Configuration changes"
    echo
    echo "${YELLOW}Examples:${NC}"
    echo "  feat(frontend): add user authentication form"
    echo "  fix(backend): resolve database connection timeout"
    echo "  docs(api): update device registration endpoint"
    echo "  style(edge-agent): apply consistent code formatting"
    echo "  refactor(task): extract validation logic to separate module"
    echo "  test(device): add unit tests for sensor controller"
    echo "  chore(deps): update dependencies to latest versions"
    echo "  ci: add automated testing for pull requests"
    echo
    exit 1
fi

# Additional validations

# Check message length
message_length=$(echo "$commit_message" | wc -c | tr -d ' ')
if [ "$message_length" -lt 10 ]; then
    print_error "Commit message is too short (minimum 10 characters)"
    exit 1
fi

if [ "$message_length" -gt 50 ]; then
    print_error "Commit message is too long (maximum 50 characters for first line)"
    echo "   Consider moving details to the commit body"
    exit 1
fi

# Check if description starts with uppercase
description=$(echo "$commit_message" | sed -E 's/^[a-z]+(\([^)]+\))?: //')
if echo "$description" | grep -q "^[A-Z]"; then
    print_error "Description should start with lowercase letter"
    exit 1
fi

# Check if description ends with period
if echo "$description" | grep -q "\.$"; then
    print_error "Description should not end with a period"
    exit 1
fi

# Check for common issues
if echo "$commit_message" | grep -qi "fix typo\|typo\|oops\|wip\|temp\|temporary"; then
    print_error "Avoid commit messages like 'fix typo', 'wip', 'temp', etc."
    echo "   Use descriptive messages that explain what was changed"
    exit 1
fi

# Extract type and scope for additional validation
type=$(echo "$commit_message" | sed -E 's/^([a-z]+)(\([^)]+\))?: .*/\1/')
scope=$(echo "$commit_message" | sed -E 's/^[a-z]+\(([^)]+)\): .*/\1/')

# Validate type-specific requirements
case "$type" in
    "feat")
        print_info "Feature commit detected - ensure you've added tests if applicable"
        ;;
    "fix")
        print_info "Bug fix commit detected - ensure you've added regression tests if applicable"
        ;;
    "docs")
        print_info "Documentation commit detected"
        ;;
    "test")
        print_info "Test commit detected"
        ;;
    "perf")
        print_info "Performance commit detected - ensure you've benchmarked the changes"
        ;;
    "security")
        print_info "Security commit detected - ensure you've followed security review process"
        ;;
esac

print_success "Commit message validation passed"
echo "üöÄ Commit message is ready"

exit 0