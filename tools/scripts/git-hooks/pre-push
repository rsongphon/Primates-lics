#!/bin/sh
# LICS Pre-push hook
# Performs additional checks before pushing to remote repository

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_error() {
    echo "${RED}âœ—${NC} $1"
}

print_success() {
    echo "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo "${YELLOW}âš ${NC} $1"
}

print_info() {
    echo "${BLUE}â„¹${NC} $1"
}

echo "ðŸš€ Running pre-push checks..."

# Get the remote and URL
remote="$1"
url="$2"

# Read from stdin to get the list of refs being pushed
while read local_ref local_sha remote_ref remote_sha; do
    if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
        # Deleting a branch
        print_info "Deleting branch $remote_ref"
        continue
    fi

    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
        # New branch
        print_info "Creating new branch $remote_ref"
        range="$local_sha"
    else
        # Updating existing branch
        range="$remote_sha..$local_sha"
    fi

    # Extract branch name
    branch_name=$(echo "$remote_ref" | sed 's|refs/heads/||')

    echo "ðŸ“¤ Pushing to branch: ${YELLOW}$branch_name${NC}"

    # Check if pushing to protected branches
    if [ "$branch_name" = "main" ] || [ "$branch_name" = "master" ]; then
        print_error "Direct push to main/master branch is not allowed"
        echo "   Please create a pull request instead"
        exit 1
    fi

    # Warn about pushing to develop branch
    if [ "$branch_name" = "develop" ]; then
        print_warning "Pushing directly to develop branch"
        echo "   Consider using feature branches and pull requests"
        read -p "Are you sure you want to continue? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Push cancelled"
            exit 1
        fi
    fi

    # Check for WIP or TODO commits
    if git log --format="%s" "$range" | grep -qi "wip\|todo\|fixme\|hack"; then
        print_error "Found WIP/TODO/FIXME commits in push"
        echo "   Please clean up commits before pushing:"
        git log --format="  %h %s" "$range" | grep -i "wip\|todo\|fixme\|hack"
        exit 1
    fi

    # Check for debug code
    if git log --format="" --name-only "$range" | xargs git show "$range" -- | grep -qi "console\.log\|print(\|debugger\|pdb\.set_trace"; then
        print_warning "Potential debug code found in commits"
        echo "   Please review and remove debug statements"
    fi

    # Check for large files
    large_files=$(git log --format="" --name-only "$range" | sort -u | while read file; do
        if [ -f "$file" ]; then
            size=$(wc -c < "$file" 2>/dev/null || echo 0)
            if [ "$size" -gt 10485760 ]; then  # 10MB
                echo "$file ($size bytes)"
            fi
        fi
    done)

    if [ ! -z "$large_files" ]; then
        print_error "Large files detected:"
        echo "$large_files" | sed 's/^/  /'
        echo "   Consider using Git LFS for large files"
        exit 1
    fi

    # Check commit count
    commit_count=$(git rev-list --count "$range" 2>/dev/null || echo 0)
    if [ "$commit_count" -gt 20 ]; then
        print_warning "Pushing $commit_count commits at once"
        echo "   Consider squashing some commits for cleaner history"
    fi

    # Validate commit messages in the range
    print_info "Validating commit messages..."
    invalid_commits=$(git log --format="%h %s" "$range" | while read commit_hash commit_msg; do
        # Skip merge commits
        if echo "$commit_msg" | grep -q "^Merge"; then
            continue
        fi

        # Check conventional commits format
        if ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\([^)]+\))?: .{1,50}$"; then
            echo "$commit_hash: $commit_msg"
        fi
    done)

    if [ ! -z "$invalid_commits" ]; then
        print_error "Invalid commit messages found:"
        echo "$invalid_commits" | sed 's/^/  /'
        echo "   Please fix commit messages using 'git rebase -i'"
        exit 1
    fi

    print_success "Commit message validation passed"

done

# Additional checks for specific branches
current_branch=$(git branch --show-current)

# Check if tests would pass (if test commands are available)
if [ -f "services/frontend/package.json" ] && [ -d "services/frontend/node_modules" ]; then
    print_info "Running frontend tests..."
    cd services/frontend
    if npm test -- --watchAll=false --ci >/dev/null 2>&1; then
        print_success "Frontend tests passed"
    else
        print_error "Frontend tests failed"
        echo "   Fix tests before pushing"
        exit 1
    fi
    cd - >/dev/null
fi

# Check if we're pushing secrets
print_info "Scanning for potential secrets..."
if git log --format="" --name-only HEAD~5..HEAD | xargs git show HEAD~5..HEAD -- | grep -iE "password|secret|key|token|api_key" | grep -v "example\|template\|placeholder"; then
    print_error "Potential secrets detected in recent commits"
    echo "   Please review and ensure no sensitive data is being pushed"
    exit 1
fi

# Check if branch is up to date with develop (for feature branches)
if echo "$current_branch" | grep -q "^feature/"; then
    if git show-ref --verify --quiet refs/remotes/origin/develop; then
        commits_behind=$(git rev-list --count HEAD..origin/develop 2>/dev/null || echo 0)
        if [ "$commits_behind" -gt 0 ]; then
            print_warning "Branch is $commits_behind commits behind develop"
            echo "   Consider rebasing on develop first: git rebase origin/develop"
        fi
    fi
fi

# Final security check for environment files
if git log --format="" --name-only HEAD~10..HEAD | grep -E "\.env$|\.env\..*|credentials|secrets"; then
    print_warning "Environment or credential files detected in recent commits"
    echo "   Ensure these files don't contain actual secrets"
fi

print_success "All pre-push checks passed"
echo "ðŸŽ‰ Ready to push to remote repository"

exit 0