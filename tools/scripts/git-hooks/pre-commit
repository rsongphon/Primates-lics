#!/bin/sh
# LICS Pre-commit hook
# This hook runs linting and format checking before allowing commits

set -e

echo "üîç Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo "${GREEN}‚úì${NC} $1"
}

print_warning() {
    echo "${YELLOW}‚ö†${NC} $1"
}

print_error() {
    echo "${RED}‚úó${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "Plan.md" ] || [ ! -f "Documentation.md" ]; then
    print_error "This doesn't appear to be the LICS repository root"
    exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    print_warning "No staged files found"
    exit 0
fi

echo "üìÅ Staged files:"
echo "$STAGED_FILES" | sed 's/^/  /'
echo

# Check for large files
echo "üìè Checking file sizes..."
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        size=$(wc -c < "$file")
        if [ $size -gt 1048576 ]; then  # 1MB
            print_error "File $file is larger than 1MB ($size bytes)"
            echo "   Consider using Git LFS for large files"
            exit 1
        fi
    fi
done
print_status "File size check passed"

# Check for secrets/sensitive data
echo "üîê Checking for potential secrets..."
SECRETS_PATTERNS="password|secret|key|token|api_key|private_key|aws_access_key|aws_secret"
if echo "$STAGED_FILES" | xargs grep -iE "$SECRETS_PATTERNS" 2>/dev/null | grep -v "example\|template\|placeholder\|dummy\|test"; then
    print_error "Potential secrets detected in staged files"
    echo "   Please review and remove any sensitive information"
    exit 1
fi
print_status "Secret detection passed"

# Frontend checks
FRONTEND_FILES=$(echo "$STAGED_FILES" | grep "^services/frontend/" || true)
if [ ! -z "$FRONTEND_FILES" ]; then
    echo "üé® Running frontend checks..."

    # Check if package.json exists
    if [ -f "services/frontend/package.json" ]; then
        cd services/frontend

        # Check if node_modules exists
        if [ ! -d "node_modules" ]; then
            print_warning "Frontend dependencies not installed, skipping frontend checks"
        else
            # Run ESLint
            if npm run lint:check >/dev/null 2>&1; then
                print_status "Frontend linting passed"
            else
                print_error "Frontend linting failed"
                echo "   Run 'npm run lint' to see details"
                exit 1
            fi

            # Run Prettier
            if npm run format:check >/dev/null 2>&1; then
                print_status "Frontend formatting passed"
            else
                print_error "Frontend formatting failed"
                echo "   Run 'npm run format' to fix formatting"
                exit 1
            fi
        fi

        cd - >/dev/null
    else
        print_warning "Frontend package.json not found, skipping frontend checks"
    fi
fi

# Backend checks
BACKEND_FILES=$(echo "$STAGED_FILES" | grep "^services/backend/" || true)
if [ ! -z "$BACKEND_FILES" ]; then
    echo "üêç Running backend checks..."

    if [ -f "services/backend/requirements.txt" ]; then
        cd services/backend

        # Check if virtual environment is active or requirements are installed
        if python -c "import fastapi" >/dev/null 2>&1; then
            # Run Black formatting check
            if python -m black --check . >/dev/null 2>&1; then
                print_status "Backend formatting passed"
            else
                print_error "Backend formatting failed"
                echo "   Run 'python -m black .' to fix formatting"
                exit 1
            fi

            # Run Ruff linting
            if python -m ruff check . >/dev/null 2>&1; then
                print_status "Backend linting passed"
            else
                print_error "Backend linting failed"
                echo "   Run 'python -m ruff check .' to see details"
                exit 1
            fi
        else
            print_warning "Backend dependencies not installed, skipping backend checks"
        fi

        cd - >/dev/null
    else
        print_warning "Backend requirements.txt not found, skipping backend checks"
    fi
fi

# Edge Agent checks
EDGE_AGENT_FILES=$(echo "$STAGED_FILES" | grep "^services/edge-agent/" || true)
if [ ! -z "$EDGE_AGENT_FILES" ]; then
    echo "ü§ñ Running edge agent checks..."

    if [ -f "services/edge-agent/requirements.txt" ]; then
        cd services/edge-agent

        # Check if requirements are installed
        if python -c "import sqlite3" >/dev/null 2>&1; then
            # Run Black formatting check
            if python -m black --check . >/dev/null 2>&1; then
                print_status "Edge agent formatting passed"
            else
                print_error "Edge agent formatting failed"
                echo "   Run 'python -m black .' to fix formatting"
                exit 1
            fi

            # Run Ruff linting
            if python -m ruff check . >/dev/null 2>&1; then
                print_status "Edge agent linting passed"
            else
                print_error "Edge agent linting failed"
                echo "   Run 'python -m ruff check .' to see details"
                exit 1
            fi
        else
            print_warning "Edge agent dependencies not installed, skipping edge agent checks"
        fi

        cd - >/dev/null
    else
        print_warning "Edge agent requirements.txt not found, skipping edge agent checks"
    fi
fi

# Infrastructure checks
INFRA_FILES=$(echo "$STAGED_FILES" | grep "^infrastructure/" || true)
if [ ! -z "$INFRA_FILES" ]; then
    echo "üèóÔ∏è Running infrastructure checks..."

    # Check Terraform files
    TERRAFORM_FILES=$(echo "$INFRA_FILES" | grep "\.tf$" || true)
    if [ ! -z "$TERRAFORM_FILES" ]; then
        if command -v terraform >/dev/null 2>&1; then
            # Run terraform fmt check
            if terraform fmt -check -recursive infrastructure/ >/dev/null 2>&1; then
                print_status "Terraform formatting passed"
            else
                print_error "Terraform formatting failed"
                echo "   Run 'terraform fmt -recursive infrastructure/' to fix formatting"
                exit 1
            fi
        else
            print_warning "Terraform not installed, skipping Terraform checks"
        fi
    fi

    # Check Kubernetes YAML files
    K8S_FILES=$(echo "$INFRA_FILES" | grep -E "\.(yaml|yml)$" || true)
    if [ ! -z "$K8S_FILES" ]; then
        if command -v kubectl >/dev/null 2>&1; then
            for file in $K8S_FILES; do
                if kubectl apply --dry-run=client -f "$file" >/dev/null 2>&1; then
                    print_status "Kubernetes manifest $file is valid"
                else
                    print_error "Kubernetes manifest $file is invalid"
                    exit 1
                fi
            done
        else
            print_warning "kubectl not installed, skipping Kubernetes manifest validation"
        fi
    fi
fi

# Check markdown files
MARKDOWN_FILES=$(echo "$STAGED_FILES" | grep -E "\.(md|markdown)$" || true)
if [ ! -z "$MARKDOWN_FILES" ]; then
    echo "üìù Running markdown checks..."

    # Basic markdown validation (check for common issues)
    for file in $MARKDOWN_FILES; do
        if [ -f "$file" ]; then
            # Check for trailing whitespace
            if grep -q " $" "$file"; then
                print_warning "Trailing whitespace found in $file"
            fi

            # Check for very long lines (>120 chars)
            if grep -q ".\{121\}" "$file"; then
                print_warning "Very long lines found in $file (consider breaking them up)"
            fi
        fi
    done
    print_status "Markdown checks completed"
fi

echo
print_status "All pre-commit checks passed!"
echo "üöÄ Ready to commit"

exit 0