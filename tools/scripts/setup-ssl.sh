#!/bin/bash

# LICS SSL Certificate Setup Script
# This script generates SSL certificates for local development using mkcert

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if mkcert is installed
check_mkcert() {
    log_info "Checking for mkcert..."

    if command_exists mkcert; then
        log_success "mkcert is installed"
        mkcert -version
    else
        log_error "mkcert is not installed"
        log_info "Please install mkcert first:"
        echo "  macOS: brew install mkcert"
        echo "  Linux: See https://github.com/FiloSottile/mkcert#installation"
        echo "  Windows: choco install mkcert"
        exit 1
    fi
}

# Install local CA
install_ca() {
    log_info "Installing local Certificate Authority..."

    if mkcert -install; then
        log_success "Local CA installed successfully"
    else
        log_warning "Failed to install local CA automatically"
        log_info "You may need to run this manually with sudo privileges:"
        echo "  sudo mkcert -install"
        log_info "Or on Windows, run as Administrator"
    fi
}

# Create SSL directory structure
create_ssl_directories() {
    log_info "Creating SSL directory structure..."

    # Create directories
    mkdir -p infrastructure/nginx/ssl
    mkdir -p infrastructure/certificates/dev
    mkdir -p infrastructure/certificates/local

    log_success "SSL directories created"
}

# Generate development certificates
generate_dev_certificates() {
    log_info "Generating development SSL certificates..."

    # Change to the SSL directory
    cd infrastructure/nginx/ssl

    # Generate certificates for all local development domains
    domains=(
        "localhost"
        "127.0.0.1"
        "::1"
        "*.localhost"
        "lics.local"
        "*.lics.local"
        "dev.lics.local"
        "api.lics.local"
        "admin.lics.local"
        "grafana.lics.local"
        "docs.lics.local"
    )

    # Join domains with spaces for mkcert
    domain_list=$(printf " %s" "${domains[@]}")
    domain_list=${domain_list:1} # Remove leading space

    log_info "Generating certificate for domains: $domain_list"

    # Generate the certificate
    if mkcert -key-file localhost-key.pem -cert-file localhost.pem $domain_list; then
        log_success "Development certificates generated"

        # Create copies with different names for compatibility
        cp localhost.pem server.crt
        cp localhost-key.pem server.key
        cp localhost.pem lics-dev.crt
        cp localhost-key.pem lics-dev.key

        # Set appropriate permissions
        chmod 600 *.key *.pem
        chmod 644 *.crt *.pem

        log_success "Certificate files created with proper permissions"
    else
        log_error "Failed to generate certificates"
        cd ../../..
        exit 1
    fi

    # Return to root directory
    cd ../../..
}

# Generate certificates for specific services
generate_service_certificates() {
    log_info "Generating service-specific certificates..."

    cd infrastructure/certificates/dev

    # Backend API certificate
    if mkcert -key-file backend-key.pem -cert-file backend.pem api.lics.local backend.lics.local; then
        log_success "Backend certificate generated"
    fi

    # Frontend certificate
    if mkcert -key-file frontend-key.pem -cert-file frontend.pem app.lics.local frontend.lics.local; then
        log_success "Frontend certificate generated"
    fi

    # Admin/Grafana certificate
    if mkcert -key-file admin-key.pem -cert-file admin.pem admin.lics.local grafana.lics.local; then
        log_success "Admin certificate generated"
    fi

    # Set permissions
    chmod 600 *-key.pem
    chmod 644 *.pem

    cd ../../..
}

# Create certificate information file
create_cert_info() {
    log_info "Creating certificate information file..."

    cat > infrastructure/nginx/ssl/README.md << 'EOF'
# LICS SSL Certificates

This directory contains SSL certificates generated by mkcert for local development.

## Files

- `localhost.pem` - Main certificate for localhost and local domains
- `localhost-key.pem` - Private key for the main certificate
- `server.crt` - Copy of main certificate (nginx compatible name)
- `server.key` - Copy of private key (nginx compatible name)
- `lics-dev.crt` - Development certificate copy
- `lics-dev.key` - Development private key copy

## Domains Covered

The certificates are valid for the following domains:

- localhost
- 127.0.0.1
- ::1 (IPv6 localhost)
- *.localhost
- lics.local
- *.lics.local
- dev.lics.local
- api.lics.local
- admin.lics.local
- grafana.lics.local
- docs.lics.local

## Usage

### Nginx Configuration

```nginx
ssl_certificate /etc/nginx/ssl/server.crt;
ssl_certificate_key /etc/nginx/ssl/server.key;
```

### Docker Compose Volume Mount

```yaml
volumes:
  - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
```

### Local Development URLs

- Frontend: https://localhost:3000
- Backend API: https://localhost:8000
- WebSocket: wss://localhost:8001
- Grafana: https://localhost:3001
- Documentation: https://localhost:8080

## Regenerating Certificates

To regenerate certificates, run:

```bash
./tools/scripts/setup-ssl.sh
```

Or use the Makefile:

```bash
make setup-ssl
```

## Trust Issues

If browsers show certificate warnings:

1. Ensure mkcert CA is installed: `mkcert -install`
2. Restart your browser
3. Check that the certificate is properly mounted in Docker containers

## Security Notes

- These certificates are for development only
- Do not use in production
- Private keys are included in the repository for development convenience
- The mkcert CA is only trusted on the local machine where it was installed
EOF

    log_success "Certificate information file created"
}

# Update /etc/hosts file for local domains
update_hosts_file() {
    log_info "Checking /etc/hosts file for local domains..."

    hosts_entries=(
        "127.0.0.1 lics.local"
        "127.0.0.1 dev.lics.local"
        "127.0.0.1 api.lics.local"
        "127.0.0.1 admin.lics.local"
        "127.0.0.1 grafana.lics.local"
        "127.0.0.1 docs.lics.local"
    )

    hosts_file="/etc/hosts"
    missing_entries=()

    # Check which entries are missing
    for entry in "${hosts_entries[@]}"; do
        if ! grep -q "$entry" "$hosts_file" 2>/dev/null; then
            missing_entries+=("$entry")
        fi
    done

    if [ ${#missing_entries[@]} -eq 0 ]; then
        log_success "All required hosts entries are present"
    else
        log_warning "Some hosts entries are missing"
        log_info "To add them automatically (requires sudo):"
        echo ""
        echo "sudo tee -a /etc/hosts << 'EOF'"
        echo ""
        echo "# LICS Local Development Domains"
        for entry in "${missing_entries[@]}"; do
            echo "$entry"
        done
        echo "EOF"
        echo ""

        # Ask if user wants to add them now
        read -p "Would you like to add these entries now? (y/N): " add_hosts
        if [[ $add_hosts =~ ^[Yy]$ ]]; then
            echo ""
            echo "# LICS Local Development Domains" | sudo tee -a "$hosts_file" > /dev/null
            for entry in "${missing_entries[@]}"; do
                echo "$entry" | sudo tee -a "$hosts_file" > /dev/null
            done
            log_success "Hosts entries added"
        else
            log_info "You can add them manually later"
        fi
    fi
}

# Verify certificates
verify_certificates() {
    log_info "Verifying generated certificates..."

    cert_file="infrastructure/nginx/ssl/localhost.pem"
    key_file="infrastructure/nginx/ssl/localhost-key.pem"

    if [ -f "$cert_file" ] && [ -f "$key_file" ]; then
        # Check certificate validity
        if openssl x509 -in "$cert_file" -text -noout > /dev/null 2>&1; then
            log_success "Certificate is valid"

            # Show certificate details
            log_info "Certificate details:"
            echo "  Subject: $(openssl x509 -in "$cert_file" -noout -subject | cut -d'=' -f2-)"
            echo "  Issuer: $(openssl x509 -in "$cert_file" -noout -issuer | cut -d'=' -f2-)"
            echo "  Valid from: $(openssl x509 -in "$cert_file" -noout -startdate | cut -d'=' -f2)"
            echo "  Valid until: $(openssl x509 -in "$cert_file" -noout -enddate | cut -d'=' -f2)"

            # Show Subject Alternative Names
            echo "  Domains covered:"
            openssl x509 -in "$cert_file" -text -noout | grep -A1 "Subject Alternative Name" | tail -1 | sed 's/^[[:space:]]*/    /'

        else
            log_error "Certificate is not valid"
            return 1
        fi
    else
        log_error "Certificate files not found"
        return 1
    fi
}

# Main setup function
main() {
    echo "=================================="
    echo "LICS SSL Certificate Setup"
    echo "=================================="
    echo ""

    log_info "Setting up SSL certificates for local development..."

    # Run setup steps
    check_mkcert
    install_ca
    create_ssl_directories
    generate_dev_certificates
    generate_service_certificates
    create_cert_info
    update_hosts_file
    verify_certificates

    echo ""
    echo "=================================="
    log_success "SSL setup completed!"
    echo "=================================="
    echo ""

    log_info "Next steps:"
    echo "1. Restart your browser to pick up the new certificates"
    echo "2. Start the development environment: make dev"
    echo "3. Access services using HTTPS:"
    echo "   - Frontend: https://localhost:3000"
    echo "   - Backend: https://localhost:8000"
    echo "   - Grafana: https://localhost:3001"
    echo ""

    log_info "If you see certificate warnings:"
    echo "1. Run: mkcert -install (with sudo if needed)"
    echo "2. Restart your browser"
    echo "3. Check Docker container certificate mounts"
    echo ""

    log_success "Local HTTPS development environment is ready!"
}

# Handle script interruption
trap 'log_error "SSL setup interrupted by user"; exit 1' INT TERM

# Run main function
main "$@"