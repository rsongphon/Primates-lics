version: '3.8'

services:
  # Frontend Development Service
  frontend-dev:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NEXT_PUBLIC_WS_URL=ws://localhost:8001
      - NEXT_PUBLIC_DEBUG=true
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend-dev
    networks:
      - lics-dev-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Backend Development Service
  backend-dev:
    build:
      context: ./services/backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
      - "8001:8001"  # WebSocket port
      - "5678:5678"  # Debugger port
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://lics:lics123@postgres-dev:5432/lics_dev
      - REDIS_URL=redis://redis-dev:6379/0
      - CELERY_BROKER_URL=redis://redis-dev:6379/1
      - CELERY_RESULT_BACKEND=redis://redis-dev:6379/1
      - MQTT_BROKER_URL=mqtt-dev
      - MQTT_BROKER_PORT=1883
      - MINIO_ENDPOINT=minio-dev:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ./services/backend:/app
      - ./logs/backend-dev:/app/logs
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - lics-dev-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Celery Worker Development
  celery-worker-dev:
    build:
      context: ./services/backend
      dockerfile: Dockerfile.dev
    command: celery -A app.tasks.celery_app worker --loglevel=debug --reload
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://lics:lics123@postgres-dev:5432/lics_dev
      - REDIS_URL=redis://redis-dev:6379/0
      - CELERY_BROKER_URL=redis://redis-dev:6379/1
      - CELERY_RESULT_BACKEND=redis://redis-dev:6379/1
    volumes:
      - ./services/backend:/app
      - ./logs/celery-dev:/app/logs
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - lics-dev-network
    restart: unless-stopped

  # Edge Agent Development (simulated)
  edge-agent-dev:
    build:
      context: ./services/edge-agent
      dockerfile: Dockerfile.dev
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - MQTT_BROKER_URL=mqtt-dev
      - MQTT_BROKER_PORT=1883
      - DEVICE_ID=dev-edge-001
      - SIMULATE_HARDWARE=true
    volumes:
      - ./services/edge-agent:/app
      - ./logs/edge-agent-dev:/app/logs
      - ./data/edge-agent-dev:/app/data
    depends_on:
      - mqtt-dev
    networks:
      - lics-dev-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # PostgreSQL Development Database
  postgres-dev:
    image: timescale/timescaledb-ha:pg15-latest
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    environment:
      - POSTGRES_DB=lics_dev
      - POSTGRES_USER=lics
      - POSTGRES_PASSWORD=lics123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_dev_data:/home/postgres/pgdata/data
      - ./infrastructure/database/init-dev.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lics-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lics -d lics_dev"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Development Cache
  redis-dev:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_dev_data:/data
    networks:
      - lics-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # MQTT Development Broker
  mqtt-dev:
    image: eclipse-mosquitto:2.0
    ports:
      - "1884:1883"  # Different port to avoid conflicts
      - "9002:9001"
    volumes:
      - ./infrastructure/mqtt/mosquitto-dev.conf:/mosquitto/config/mosquitto.conf
      - mqtt_dev_data:/mosquitto/data
      - mqtt_dev_logs:/mosquitto/log
    networks:
      - lics-dev-network
    restart: unless-stopped

  # MinIO Development Storage
  minio-dev:
    image: minio/minio:latest
    ports:
      - "9010:9000"  # Different port to avoid conflicts
      - "9011:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_dev_data:/data
    networks:
      - lics-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - lics-dev-network
    restart: unless-stopped

  # Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis-dev:6379
    depends_on:
      - redis-dev
    networks:
      - lics-dev-network
    restart: unless-stopped

  # PgAdmin (PostgreSQL GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@lics.dev
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      - postgres-dev
    networks:
      - lics-dev-network
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - lics-dev-network
    restart: unless-stopped

  # Development Documentation Server
  docs-dev:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./docs:/usr/share/nginx/html:ro
      - ./infrastructure/nginx/docs.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - lics-dev-network
    restart: unless-stopped

networks:
  lics-dev-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  mqtt_dev_data:
    driver: local
  mqtt_dev_logs:
    driver: local
  minio_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local