version: '3.8'

services:
  # Frontend Development Service
  frontend-dev:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NEXT_PUBLIC_WS_URL=ws://localhost:8001
      - NEXT_PUBLIC_DEBUG=true
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend-dev
    networks:
      - lics-dev-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Backend Development Service
  backend-dev:
    build:
      context: ./services/backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
      - "8001:8001"  # WebSocket port
      - "5678:5678"  # Debugger port
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://lics:lics123@postgres-dev:5432/lics_dev
      - REDIS_URL=redis://redis-dev:6379/0
      - CELERY_BROKER_URL=redis://redis-dev:6379/1
      - CELERY_RESULT_BACKEND=redis://redis-dev:6379/1
      - MQTT_BROKER_URL=mqtt-dev
      - MQTT_BROKER_PORT=1883
      - MINIO_ENDPOINT=minio-dev:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ./services/backend:/app
      - ./logs/backend-dev:/app/logs
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - lics-dev-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Celery Worker Development
  celery-worker-dev:
    build:
      context: ./services/backend
      dockerfile: Dockerfile.dev
    command: celery -A app.tasks.celery_app worker --loglevel=debug --reload
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://lics:lics123@postgres-dev:5432/lics_dev
      - REDIS_URL=redis://redis-dev:6379/0
      - CELERY_BROKER_URL=redis://redis-dev:6379/1
      - CELERY_RESULT_BACKEND=redis://redis-dev:6379/1
    volumes:
      - ./services/backend:/app
      - ./logs/celery-dev:/app/logs
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - lics-dev-network
    restart: unless-stopped

  # Edge Agent Development (simulated)
  edge-agent-dev:
    build:
      context: ./services/edge-agent
      dockerfile: Dockerfile.dev
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - MQTT_BROKER_URL=mqtt-dev
      - MQTT_BROKER_PORT=1883
      - DEVICE_ID=dev-edge-001
      - SIMULATE_HARDWARE=true
    volumes:
      - ./services/edge-agent:/app
      - ./logs/edge-agent-dev:/app/logs
      - ./data/edge-agent-dev:/app/data
    depends_on:
      - mqtt-dev
    networks:
      - lics-dev-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # PostgreSQL Development Database
  postgres-dev:
    image: timescale/timescaledb-ha:pg15-latest
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    environment:
      - POSTGRES_DB=lics_dev
      - POSTGRES_USER=lics
      - POSTGRES_PASSWORD=lics123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_dev_data:/home/postgres/pgdata/data
      - ./infrastructure/database/init-dev.sql:/docker-entrypoint-initdb.d/init.sql
      - ./infrastructure/database/postgresql-dev.conf:/etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - lics-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lics -d lics_dev"]
      interval: 5s
      timeout: 5s
      retries: 5

  # PgBouncer Development Connection Pooler
  pgbouncer-dev:
    image: pgbouncer/pgbouncer:latest
    ports:
      - "6433:6432"  # Different port to avoid conflicts
    environment:
      - DATABASES_HOST=postgres-dev
      - DATABASES_PORT=5432
      - DATABASES_USER=lics
      - DATABASES_PASSWORD=lics123
      - DATABASES_DBNAME=lics_dev
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=50
      - DEFAULT_POOL_SIZE=10
    volumes:
      - ./infrastructure/pgbouncer/pgbouncer-dev.ini:/etc/pgbouncer/pgbouncer.ini
      - ./infrastructure/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
    networks:
      - lics-dev-network
    restart: unless-stopped
    depends_on:
      postgres-dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "psql", "-h", "localhost", "-p", "6432", "-U", "lics", "-d", "lics_dev", "-c", "SELECT 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis Development Cache
  redis-dev:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_dev_data:/data
      - ./infrastructure/redis:/scripts:ro
    networks:
      - lics-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis Streams Setup Service
  redis-setup:
    image: python:3.11-alpine
    depends_on:
      redis-dev:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis-dev:6379/0
    volumes:
      - ./infrastructure/redis:/scripts:ro
    networks:
      - lics-dev-network
    working_dir: /scripts
    entrypoint: /bin/sh
    command: -c "pip install redis && python streams-setup.py --action setup && python pubsub-config.py --action setup && echo 'Redis setup completed'"
    restart: "no"

  # MQTT Development Broker
  mqtt-dev:
    image: eclipse-mosquitto:2.0
    ports:
      - "1884:1883"  # Different port to avoid conflicts
      - "9002:9001"
    volumes:
      - ./infrastructure/mqtt/mosquitto-dev.conf:/mosquitto/config/mosquitto.conf:ro
      - ./infrastructure/mqtt/passwords.txt:/mosquitto/config/passwords.txt:ro
      - ./infrastructure/mqtt/acl.txt:/mosquitto/config/acl.txt:ro
      - mqtt_dev_data:/mosquitto/data
      - mqtt_dev_logs:/mosquitto/log
    networks:
      - lics-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "lics/system/healthcheck", "-m", "ok"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MQTT Setup Service (creates auth files)
  mqtt-setup:
    image: eclipse-mosquitto:2.0
    volumes:
      - ./infrastructure/mqtt:/scripts:ro
      - ./infrastructure/mqtt:/output
    networks:
      - lics-dev-network
    entrypoint: /bin/sh
    command: -c "cd /scripts && ./setup-mqtt-auth.sh setup && echo 'MQTT authentication setup completed'"
    restart: "no"

  # MinIO Development Storage
  minio-dev:
    image: minio/minio:latest
    ports:
      - "9010:9000"  # Different port to avoid conflicts
      - "9011:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_ENDPOINT=http://localhost:9010
    command: server /data --console-address ":9001"
    volumes:
      - minio_dev_data:/data
      - ./infrastructure/minio:/scripts:ro
    networks:
      - lics-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MinIO Setup Service (runs once to initialize buckets)
  minio-setup:
    image: minio/mc:latest
    depends_on:
      minio-dev:
        condition: service_healthy
    environment:
      - MINIO_ENDPOINT=http://minio-dev:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ./infrastructure/minio:/scripts:ro
    networks:
      - lics-dev-network
    entrypoint: /bin/sh
    command: -c "sleep 10 && /scripts/bucket-init.sh init && echo 'MinIO setup completed'"
    restart: "no"

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - lics-dev-network
    restart: unless-stopped

  # Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis-dev:6379
    depends_on:
      - redis-dev
    networks:
      - lics-dev-network
    restart: unless-stopped

  # InfluxDB Development Time Series Database
  influxdb-dev:
    image: influxdb:2.7-alpine
    ports:
      - "8087:8086"  # Different port to avoid conflicts
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=devInflux123
      - DOCKER_INFLUXDB_INIT_ORG=lics-dev
      - DOCKER_INFLUXDB_INIT_BUCKET=telemetry-dev
      - DOCKER_INFLUXDB_INIT_RETENTION=7d  # Shorter retention for dev
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=lics-dev-admin-token
    volumes:
      - influxdb_dev_data:/var/lib/influxdb2
      - ./infrastructure/influxdb/init-dev.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - lics-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5

  # PgAdmin (PostgreSQL GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@lics.dev
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      - postgres-dev
    networks:
      - lics-dev-network
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - lics-dev-network
    restart: unless-stopped

  # Development Documentation Server
  docs-dev:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./docs:/usr/share/nginx/html:ro
      - ./infrastructure/nginx/docs.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - lics-dev-network
    restart: unless-stopped

networks:
  lics-dev-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  mqtt_dev_data:
    driver: local
  mqtt_dev_logs:
    driver: local
  minio_dev_data:
    driver: local
  influxdb_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local